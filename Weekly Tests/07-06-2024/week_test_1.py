# -*- coding: utf-8 -*-
"""Week test 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11t-dny8CE7LaugrqjaIsO_d3s6RVxM2-
"""



"""1) What is Encapsulation?

Ans: Combining functions that manipulate data  and data attributes into a single class and restricting access to them is known as encapsulation.

Example for Encapsulation:  An ATM machine encapsulates sensitive data by providing public methods  while restricting direct access to the internal data.
"""

#Encapsulation code in python
class Bike:
    def __init__(self, brand, model, year):
        # self.__brand = brand
        self.__brand = brand
        self.model = model
        self.year = year

    def get_brand(self):
        return self.__brand

    def accelerate(self):
        print(f"The {self.model} is accelerating!")

# Create a Bike object
my_Bike = Bike("Enfield", "Model 350", 2024)

# Access public attribute
print(my_Bike.model)

print(my_Bike.get_brand())

"""2) What is polymorphism?

Ans:  Because of polymorphism, objects belonging to various classes can react differently to the same method call.

example : A payment system processes different payment method using a unified interface.

"""

# Polymorphism code in python

class Bird:
    def sound(self):
        pass

class Sparrow(Bird):
    def sound(self):
        return "Chirp"

class Eagle(Bird):
    def sound(self):
        return "Screech"

def make_sound(bird):
    print(bird.sound())

sparrow = Sparrow()
eagle = Eagle()

make_sound(sparrow)
make_sound(eagle)

"""3) Explain Single Level Inheritance with python code.

Ans: One subclass inherits from one superclass. It gives the subclass permission to use the superclass's properties and functions again.


"""

# Single level Inheritance code in python

class Bike:
    def move(self):
        print("Bike moves")


class MountainBike(Bike):
    def move(self):
        print("Mountain bike conquers rough terrains")

    def pedal(self):
        print("Pedal harder for uphill climbs")

# Create an instance of MountainBike
mountain_bike = MountainBike()
mountain_bike.move()
mountain_bike.pedal()

"""4) Explain Multiple inheritance with python code.

Ans: This is the procedure by which a subclass inherits from a base class through another subclass.

"""

# Multiple inheritance python code
# Base class 1
class Employee:
    def role(self):
        print("Employee's role")

# Base class 2
class Student:
    def role(self):
        print("Student's role")

# Derived class
class Person(Employee, Student):
    def role(self):
        super().role()
        print("Person's role")

# Create an instance of Person
person = Person()
person.role()

"""5)Explain Muti-level inheritance with python code

Ans: Multi-level inheritance occurs when one subclass inherits from another, which also comes from a base class.

"""

# Muti-level inheritance python code
# Base class
class Bird:
    def fly(self):
        print("Bird is flying")

# Subclass inheriting from Bird
class Parrot(Bird):
    def speak(self):
        print("Parrot sings")

# Subclass inheriting from Parrot
class Macaw(Parrot):
    def dance(self):
        print("Macaw dances")

# Create an instance of Macaw
macaw = Macaw()
macaw.fly()
macaw.speak()
macaw.dance()

"""6) 6. What do you mean by conditional statements. Explain with python code

Ans: It helps us to make decisions depending on the situations/ conditions.
Example : if,else,elif
"""

# conditional statements
# Input the age
age = int(input("Enter your age: "))

if age < 0:
    print("Invalid age")
elif age < 18:
    print("You are a minor")
elif age < 65:
    print("You are an adult")
else:
    print("You are a senior citizen")

"""7) What do you mean by decision making statements. Explain with python code.

Ans: Decision-making statements enable programs to make intelligent choices and adapt their behavior based on specific conditions.
"""

# Decision making statements
# Input the age
age = int(input("Enter your age: "))
if age < 3:
    print("Your ticket is free")
elif age >= 3 and age <= 12:
    print("Your ticket costs $10")
else:
    print("Your ticket costs $15")

"""8) Write a program of factorial in python"""

# Function to calculate factorial
def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result
num = int(input("Enter a number: "))

if num < 0:
    print("Factorial is not defined for negative numbers.")
else:
    print("Factorial of", num, "is", factorial(num))

"""9) What do you understand by Functions? Explain with python code.

Ans:
 Function makes it possible for us to repeatedly utilize the same section of code without explicitly defining when we need to use
"""

def calculate_rectangle_area():

    length = float(input("Enter the length of the rectangle: "))
    width = float(input("Enter the width of the rectangle: "))

    # Calculate the area of the rectangle
    area = length * width

    # calculated area
    print("The area of the rectangle is:", area)

# Call the calculate_rectangle_area function
calculate_rectangle_area()

"""10) How many pillars of Oops we have in Python?

Ans: Objects: Use data and methods behaviors to represent real-world entities.

Classes: Object creation blueprints that specify their properties and actions.

Inheritance : It enables subclasses to inherit properties from superclasses

Polymorphism: Objects of different classes can react differently to the same method in polymorphism

Encapsulation: Groups data and methods within a class to preserve data integrity and promote modularity.

"""